diff --git storage/innobase/buf/buf0buf.cc storage/innobase/buf/buf0buf.cc
index 41d242a9360..e6acaa632ba 100644
--- storage/innobase/buf/buf0buf.cc
+++ storage/innobase/buf/buf0buf.cc
@@ -37,6 +37,10 @@ Created 11/5/1995 Heikki Tuuri
 #include "buf0checksum.h"
 #include "ut0crc32.h"
 #include <string.h>
+#include <functional>
+#include <thread>
+#include <mutex>
+#include <condition_variable>
 
 #ifndef UNIV_INNOCHECKSUM
 #include "mem0mem.h"
@@ -1879,6 +1883,99 @@ static void buf_block_free_mutexes(buf_block_t* block)
 	ut_d(ut_free(block->debug_latch));
 }
 
+namespace CustomThreadPool
+{
+	class CustomThreadPool
+	{
+		public:
+			CustomThreadPool(size_t n_threads);
+			~CustomThreadPool() { ; };
+
+			void enqueue(std::function<void()> job);
+			void wait_all();
+		private:
+			size_t n_threads_;
+			std::vector<std::thread> worker_threads_;
+			std::queue<std::function<void()>> jobs_;
+			std::condition_variable cv_;
+			std::mutex mutex_;
+			void thread_handler();
+			bool flag_stop;
+	};
+
+	CustomThreadPool::CustomThreadPool(size_t n_threads)
+		: n_threads_(n_threads), flag_stop(false)
+	{
+		worker_threads_.reserve(n_threads_);
+		for (size_t i = 0; i < n_threads; i++)
+		{
+			worker_threads_.emplace_back([this]() { this->thread_handler();} );
+		}
+	}
+
+	void CustomThreadPool::thread_handler()
+	{
+		while (true) {
+			std::unique_lock<std::mutex> lock(mutex_);
+			cv_.wait(lock, [this]() { return !this->jobs_.empty() || this->flag_stop; });
+			if (flag_stop && this->jobs_.empty()) {
+				return ;
+			}
+
+			std::function<void()> job = std::move(jobs_.front());
+			jobs_.pop();
+			lock.unlock();
+
+			job();
+		}
+	}
+
+	void CustomThreadPool::enqueue(std::function<void()> job) {
+		{
+			std::lock_guard<std::mutex> lock(mutex_);
+			jobs_.push(std::move(job));
+		}
+		cv_.notify_one();
+	}
+
+	void CustomThreadPool::wait_all()
+	{
+		flag_stop = true;
+		cv_.notify_all();
+		for (auto& t : worker_threads_) {
+			t.join();
+		}
+	}
+}
+
+void work_buf_chunk_init(
+	buf_pool_t*		buf_pool,
+	buf_chunk_t*	chunk,
+	ulint			chunk_size
+	)
+{
+
+	ulint i;
+	if (!buf_chunk_init(buf_pool, chunk, chunk_size)) {
+		while (--chunk >= buf_pool->chunks) {
+			buf_block_t*	block = chunk->blocks;
+
+			for (i = chunk->size; i--; block++) {
+				buf_block_free_mutexes(block);
+			}
+
+			buf_pool->allocator.deallocate_large_dodump(
+				chunk->mem, &chunk->mem_pfx, chunk->mem_size());
+		}
+		ut_free(buf_pool->chunks);
+		buf_pool_mutex_exit(buf_pool);
+		printf("DB ERROR AT WORKER\n");
+		// return(DB_ERROR);
+	}
+	// buf_pool->curr_size += chunk->size;
+	__sync_fetch_and_add(&buf_pool->curr_size, chunk->size);
+}
+
 /********************************************************************//**
 Initialize a buffer pool instance.
 @return DB_SUCCESS if all goes well. */
@@ -1896,6 +1993,8 @@ buf_pool_init_instance(
 
 	ut_ad(buf_pool_size % srv_buf_pool_chunk_unit == 0);
 
+	struct timeval stop, start;
+
 	/* 1. Initialize general fields
 	------------------------------- */
 	mutex_create(LATCH_ID_BUF_POOL, &buf_pool->mutex);
@@ -1928,34 +2027,32 @@ buf_pool_init_instance(
 		UT_LIST_INIT(buf_pool->zip_clean, &buf_page_t::list);
 #endif /* UNIV_DEBUG || UNIV_BUF_DEBUG */
 
+		printf("wait for utility list\n");
+		gettimeofday(&start, NULL);
 		for (i = 0; i < UT_ARR_SIZE(buf_pool->zip_free); ++i) {
 			UT_LIST_INIT(
 				buf_pool->zip_free[i], &buf_buddy_free_t::list);
 		}
+		gettimeofday(&stop, NULL);
+		printf("utility list init : %lu us\n", (stop.tv_sec - start.tv_sec) * 1000000 + stop.tv_usec - start.tv_usec);
 
 		buf_pool->curr_size = 0;
 		chunk = buf_pool->chunks;
 
-		do {
-			if (!buf_chunk_init(buf_pool, chunk, chunk_size)) {
-				while (--chunk >= buf_pool->chunks) {
-					buf_block_t*	block = chunk->blocks;
-
-					for (i = chunk->size; i--; block++) {
-						buf_block_free_mutexes(block);
-					}
-
-					buf_pool->allocator.deallocate_large_dodump(
-						chunk->mem, &chunk->mem_pfx, chunk->mem_size());
-				}
-				ut_free(buf_pool->chunks);
-				buf_pool_mutex_exit(buf_pool);
+		ulint cnt_core = sysconf(_SC_NPROCESSORS_ONLN);
+		printf("core : %lu\n", cnt_core);
+		printf("wait for chunk init\n");
+		gettimeofday(&start, NULL);
 
-				return(DB_ERROR);
-			}
-
-			buf_pool->curr_size += chunk->size;
-		} while (++chunk < buf_pool->chunks + buf_pool->n_chunks);
+		CustomThreadPool::CustomThreadPool pool(sysconf(_SC_NPROCESSORS_ONLN));
+		do {
+			pool.enqueue([buf_pool, chunk, chunk_size]() { work_buf_chunk_init(buf_pool, chunk, chunk_size); });
+			// work_buf_chunk_init(buf_pool, chunk, chunk_size);
+			++chunk;
+		} while (chunk < buf_pool->chunks + buf_pool->n_chunks);
+		pool.wait_all();
+		gettimeofday(&stop, NULL);
+		printf("chunk init : %lu us\n", (stop.tv_sec - start.tv_sec) * 1000000 + stop.tv_usec - start.tv_usec);
 
 		buf_pool->instance_no = instance_no;
 		buf_pool->read_ahead_area =
@@ -2130,6 +2227,8 @@ buf_pool_init(
 
 	buf_chunk_map_reg = UT_NEW_NOKEY(buf_pool_chunk_map_t());
 
+	struct timeval stop, start;
+	gettimeofday(&start, NULL);
 	for (i = 0; i < n_instances; i++) {
 		buf_pool_t*	ptr	= &buf_pool_ptr[i];
 
@@ -2141,6 +2240,8 @@ buf_pool_init(
 			return(DB_ERROR);
 		}
 	}
+	gettimeofday(&stop, NULL);
+	printf("buf pool init time : %lu us\n", (stop.tv_sec - start.tv_sec) * 1000000 + stop.tv_usec - start.tv_usec);
 
 	buf_chunk_map_ref = buf_chunk_map_reg;
 
